{"version":3,"file":"index-4216f1c9.esm.js","sources":["../../src/utils/get-file-size/get-file-size.ts","../../src/utils/get-hash/get-hash.ts","../../src/hooks/useNexusRepositoryManagerAppData.ts","../../src/components/ArtifactTable/ArtifactTable.tsx","../../src/components/NexusRepositoryManager/NexusRepositoryManager.tsx"],"sourcesContent":["import { ComponentXO, DockerManifest } from '../../types';\n\nexport function getFileSize({\n  component,\n  dockerManifests,\n}: {\n  component: ComponentXO;\n  dockerManifests: (DockerManifest | null)[];\n}) {\n  const componentsSize =\n    component.assets?.reduce((acc, asset) => {\n      return acc + (asset.fileSize ?? 0);\n    }, 0) ?? 0;\n\n  const dockerManifestsSize = dockerManifests.reduce((acc, dockerManifest) => {\n    if (!dockerManifest) {\n      return acc;\n    }\n\n    if (dockerManifest.schemaVersion === 1) {\n      return acc;\n    }\n\n    const layerSize = dockerManifest.layers.reduce((layerAcc, layer) => {\n      return layerAcc + layer.size;\n    }, 0);\n\n    return acc + dockerManifest.config.size + layerSize;\n  }, 0);\n\n  return componentsSize + dockerManifestsSize;\n}\n","import { AssetHash, AssetXO } from '../../types';\n\nexport function getHash(asset: AssetXO | undefined): AssetHash | undefined {\n  if (!asset?.checksum) {\n    return undefined;\n  }\n\n  // SHA-1/MD5 are the defaults for Maven\n  // SHA-1 picked over MD5 as it seems to always be present\n  // @see {@link https://maven.apache.org/resolver/about-checksums.html}\n  if (asset.format === 'maven2' && 'sha1' in asset.checksum) {\n    return {\n      algorithm: 'sha1',\n      value: String(asset.checksum.sha1),\n    };\n  }\n\n  // The checksum should be present with a sha256\n  if ('sha256' in asset.checksum) {\n    return {\n      algorithm: 'sha256',\n      value: String(asset.checksum.sha256),\n    };\n  }\n\n  return undefined;\n}\n","import { type Entity } from '@backstage/catalog-model';\n\nimport { NEXUS_REPOSITORY_MANAGER_CONFIG_ANNOTATIONS } from '../annotations';\nimport { Annotation, type SearchServiceQuery } from '../types';\n\ntype UseNexusRepositoryManagerAppDataArgs = {\n  entity: Entity;\n  ANNOTATIONS: Readonly<Annotation[]>;\n};\n\nexport const useNexusRepositoryManagerAppData = ({\n  entity,\n  ANNOTATIONS,\n}: UseNexusRepositoryManagerAppDataArgs): {\n  title: string;\n  query: SearchServiceQuery;\n} => {\n  const value = ANNOTATIONS.reduce(\n    (acc, v) => {\n      const repository = entity?.metadata.annotations?.[v.annotation];\n\n      if (!repository) {\n        return acc;\n      }\n\n      acc.repositories.push(repository);\n      const query = v.query\n        ? Object.assign(acc.query, v.query(repository), { sort: 'version' })\n        : acc.query;\n\n      return {\n        ...acc,\n        query,\n      };\n    },\n    { repositories: [], query: {} } as {\n      repositories: string[];\n      query: SearchServiceQuery;\n    },\n  );\n\n  if (value.repositories.length === 0) {\n    throw new Error(`A Nexus Repository Manager annotation could not be found`);\n  }\n\n  let title: string | undefined;\n  NEXUS_REPOSITORY_MANAGER_CONFIG_ANNOTATIONS.forEach(v => {\n    switch (v.annotation /* NOSONAR - use switch for exhaustive check */) {\n      case 'nexus-repository-manager/config.title':\n        title = entity?.metadata.annotations?.[v.annotation];\n        break;\n      default:\n        // We want to throw a TS error if we have an unhandled annotation\n        // eslint-disable-next-line no-case-declarations\n        const exhaustiveCheck: never = v.annotation;\n        throw new Error(`Unhandled annotation case: ${exhaustiveCheck}`);\n    }\n  });\n\n  return {\n    title: title ?? value.repositories.join(' | '),\n    query: value.query,\n  };\n};\n","import React from 'react';\n\nimport { Link, Table, type TableColumn } from '@backstage/core-components';\n\nimport { Box, Chip, makeStyles } from '@material-ui/core';\n\nimport { formatByteSize } from '@janus-idp/shared-react';\n\nimport type { AssetHash } from '../../types';\n\nexport type ArtifactRowData = {\n  id?: string;\n  version?: string;\n  artifact?: string;\n  assetVariants: Set<string>;\n  repositoryType?: string;\n  hash?: AssetHash;\n  lastModified?: string;\n  sizeBytes?: number;\n};\n\nconst useStyles = makeStyles(theme => ({\n  chip: {\n    margin: 0,\n    marginRight: '.2em',\n    height: '1.5em',\n    '& > span': {\n      padding: '.3em',\n    },\n  },\n  empty: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'center',\n  },\n}));\n\nexport const ArtifactTable = ({\n  artifacts,\n  title,\n}: {\n  artifacts: ArtifactRowData[];\n  title: string;\n}) => {\n  const classes = useStyles();\n\n  const columns: TableColumn<ArtifactRowData>[] = [\n    {\n      title: 'Version',\n      field: 'version',\n      type: 'string',\n      highlight: true,\n    },\n    {\n      title: 'Artifact',\n      field: 'artifact',\n      type: 'string',\n      render: rowData => (\n        <>\n          {rowData.artifact}\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              flexWrap: 'wrap',\n              marginTop: '0.2em',\n            }}\n          >\n            {/* sort/reverse for stable order, and so we get `jar +sources` */}\n            {[...rowData.assetVariants]\n              .sort((a, b) => a.localeCompare(b))\n              .reverse()\n              .map(variant => {\n                return (\n                  <Chip\n                    label={variant}\n                    key={variant}\n                    className={classes.chip}\n                  />\n                );\n              })}\n          </Box>\n        </>\n      ),\n    },\n    {\n      title: 'Repository Type',\n      field: 'repositoryType',\n      type: 'string',\n    },\n    {\n      title: 'Checksum',\n      field: 'hash',\n      emptyValue: 'N/A',\n      render: rowData => (\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n          <Chip label={rowData.hash?.algorithm} className={classes.chip} />\n          {rowData.hash?.value.slice(0, 12)}\n        </Box>\n      ),\n      customFilterAndSearch: (term, rowData) => {\n        if (!rowData.hash) {\n          return false;\n        }\n        return rowData.hash.value.includes(term);\n      },\n      customSort: (a, b) => {\n        if (!a.hash) {\n          return -1;\n        }\n        if (!b.hash) {\n          return 1;\n        }\n        if (a.hash.value === b.hash.value) {\n          return 0;\n        }\n        return a.hash.value < b.hash.value ? -1 : 1;\n      },\n    },\n    {\n      title: 'Modified',\n      field: 'lastModified',\n      type: 'string',\n    },\n    {\n      title: 'Size',\n      field: 'sizeBytes',\n      render: rowData => formatByteSize(rowData.sizeBytes),\n    },\n  ];\n\n  return (\n    <Table\n      title={`Nexus Repository Manager: ${title}`}\n      options={{ paging: true, padding: 'dense' }}\n      data={artifacts}\n      columns={columns}\n      emptyContent={\n        <div\n          className={classes.empty}\n          data-testid=\"nexus-repository-manager-empty-table\"\n        >\n          No data was added yet,&nbsp;\n          <Link to=\"https://github.com/janus-idp/backstage-plugins/blob/main/plugins/nexus-repository-manager/ANNOTATIONS.md\">\n            learn how to add data\n          </Link>\n          .\n        </div>\n      }\n    />\n  );\n};\n","import React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { Progress } from '@backstage/core-components';\nimport { useApi } from '@backstage/core-plugin-api';\nimport { useEntity } from '@backstage/plugin-catalog-react';\n\nimport { formatDate } from '@janus-idp/shared-react';\n\nimport { NexusRepositoryManagerApiRef } from '../../api';\nimport { useNexusRepositoryManagerAppData } from '../../hooks';\nimport { ComponentXO } from '../../types';\nimport { getFileSize, getHash, isPrimaryAsset } from '../../utils';\nimport { ArtifactTable } from '../ArtifactTable';\n\n// Artifact types that we want to display: either classifiers (e.g. javadoc) or extensions (e.g. zip)\nexport function getAssetVariants(component: ComponentXO) {\n  return new Set<string>(\n    component.assets?.flatMap(asset => {\n      if (!asset.maven2) {\n        return [];\n      }\n\n      const { classifier, extension } = asset.maven2;\n      if (extension === 'jar' && classifier) {\n        return `+${classifier}`;\n      }\n      if (isPrimaryAsset(asset) && extension) {\n        return extension;\n      }\n      return [];\n    }),\n  );\n}\n\nexport function NexusRepositoryManager() {\n  const nexusClient = useApi(NexusRepositoryManagerApiRef);\n  const { entity } = useEntity();\n  const { ANNOTATIONS } = nexusClient.getAnnotations();\n\n  const { title, query } = useNexusRepositoryManagerAppData({\n    entity,\n    ANNOTATIONS,\n  });\n\n  const { value: components = [], loading } = useAsync(async () => {\n    const res = await nexusClient.getComponents(query);\n\n    return res.components;\n  });\n\n  if (loading) {\n    return (\n      <div data-testid=\"nexus-repository-manager-loading\">\n        <Progress />\n      </div>\n    );\n  }\n\n  const artifacts = components?.map(v => {\n    const { component } = v;\n\n    // theres only one asset per docker.image-name component\n    // if we want to support multiple repository types\n    // this will probably need to change in the future,\n    const firstAsset = component.assets?.find(isPrimaryAsset);\n\n    return {\n      id: component.id,\n      version: component.version,\n      artifact:\n        // Include groupID for maven components\n        component.format === 'maven2' && component.group\n          ? `${component.group}:${component.name}`\n          : component.name,\n      assetVariants: getAssetVariants(component),\n      repositoryType: component.repository,\n      hash: getHash(firstAsset),\n      lastModified: formatDate(firstAsset?.lastModified),\n      // TODO for a maven component that uploads e.g. a protobuf, jar, and zip,\n      // this will combine all of their sizes.\n      sizeBytes: getFileSize(v),\n    };\n  });\n\n  return (\n    <div\n      style={{ border: '1px solid #ddd' }}\n      data-testid=\"nexus-repository-manager-table\"\n    >\n      <ArtifactTable title={title} artifacts={artifacts} />\n    </div>\n  );\n}\n"],"names":["_a"],"mappings":"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"}
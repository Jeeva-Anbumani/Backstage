import React from 'react';
import { useAsync } from 'react-use';
import { Table, Link, Progress } from '@backstage/core-components';
import { useApi } from '@backstage/core-plugin-api';
import { useEntity } from '@backstage/plugin-catalog-react';
import { formatByteSize, formatDate } from '@janus-idp/shared-react';
import { N as NEXUS_REPOSITORY_MANAGER_CONFIG_ANNOTATIONS, a as NexusRepositoryManagerApiRef, i as isPrimaryAsset } from './index-496595d6.esm.js';
import { makeStyles, Box, Chip } from '@material-ui/core';

function getFileSize({
  component,
  dockerManifests
}) {
  var _a, _b;
  const componentsSize = (_b = (_a = component.assets) == null ? void 0 : _a.reduce((acc, asset) => {
    var _a2;
    return acc + ((_a2 = asset.fileSize) != null ? _a2 : 0);
  }, 0)) != null ? _b : 0;
  const dockerManifestsSize = dockerManifests.reduce((acc, dockerManifest) => {
    if (!dockerManifest) {
      return acc;
    }
    if (dockerManifest.schemaVersion === 1) {
      return acc;
    }
    const layerSize = dockerManifest.layers.reduce((layerAcc, layer) => {
      return layerAcc + layer.size;
    }, 0);
    return acc + dockerManifest.config.size + layerSize;
  }, 0);
  return componentsSize + dockerManifestsSize;
}

function getHash(asset) {
  if (!(asset == null ? void 0 : asset.checksum)) {
    return void 0;
  }
  if (asset.format === "maven2" && "sha1" in asset.checksum) {
    return {
      algorithm: "sha1",
      value: String(asset.checksum.sha1)
    };
  }
  if ("sha256" in asset.checksum) {
    return {
      algorithm: "sha256",
      value: String(asset.checksum.sha256)
    };
  }
  return void 0;
}

const useNexusRepositoryManagerAppData = ({
  entity,
  ANNOTATIONS
}) => {
  const value = ANNOTATIONS.reduce(
    (acc, v) => {
      var _a;
      const repository = (_a = entity == null ? void 0 : entity.metadata.annotations) == null ? void 0 : _a[v.annotation];
      if (!repository) {
        return acc;
      }
      acc.repositories.push(repository);
      const query = v.query ? Object.assign(acc.query, v.query(repository), { sort: "version" }) : acc.query;
      return {
        ...acc,
        query
      };
    },
    { repositories: [], query: {} }
  );
  if (value.repositories.length === 0) {
    throw new Error(`A Nexus Repository Manager annotation could not be found`);
  }
  let title;
  NEXUS_REPOSITORY_MANAGER_CONFIG_ANNOTATIONS.forEach((v) => {
    var _a;
    switch (v.annotation) {
      case "nexus-repository-manager/config.title":
        title = (_a = entity == null ? void 0 : entity.metadata.annotations) == null ? void 0 : _a[v.annotation];
        break;
      default:
        const exhaustiveCheck = v.annotation;
        throw new Error(`Unhandled annotation case: ${exhaustiveCheck}`);
    }
  });
  return {
    title: title != null ? title : value.repositories.join(" | "),
    query: value.query
  };
};

const useStyles = makeStyles((theme) => ({
  chip: {
    margin: 0,
    marginRight: ".2em",
    height: "1.5em",
    "& > span": {
      padding: ".3em"
    }
  },
  empty: {
    padding: theme.spacing(2),
    display: "flex",
    justifyContent: "center"
  }
}));
const ArtifactTable = ({
  artifacts,
  title
}) => {
  const classes = useStyles();
  const columns = [
    {
      title: "Version",
      field: "version",
      type: "string",
      highlight: true
    },
    {
      title: "Artifact",
      field: "artifact",
      type: "string",
      render: (rowData) => /* @__PURE__ */ React.createElement(React.Fragment, null, rowData.artifact, /* @__PURE__ */ React.createElement(
        Box,
        {
          sx: {
            display: "flex",
            alignItems: "center",
            flexWrap: "wrap",
            marginTop: "0.2em"
          }
        },
        [...rowData.assetVariants].sort((a, b) => a.localeCompare(b)).reverse().map((variant) => {
          return /* @__PURE__ */ React.createElement(
            Chip,
            {
              label: variant,
              key: variant,
              className: classes.chip
            }
          );
        })
      ))
    },
    {
      title: "Repository Type",
      field: "repositoryType",
      type: "string"
    },
    {
      title: "Checksum",
      field: "hash",
      emptyValue: "N/A",
      render: (rowData) => {
        var _a, _b;
        return /* @__PURE__ */ React.createElement(Box, { sx: { display: "flex", alignItems: "center" } }, /* @__PURE__ */ React.createElement(Chip, { label: (_a = rowData.hash) == null ? void 0 : _a.algorithm, className: classes.chip }), (_b = rowData.hash) == null ? void 0 : _b.value.slice(0, 12));
      },
      customFilterAndSearch: (term, rowData) => {
        if (!rowData.hash) {
          return false;
        }
        return rowData.hash.value.includes(term);
      },
      customSort: (a, b) => {
        if (!a.hash) {
          return -1;
        }
        if (!b.hash) {
          return 1;
        }
        if (a.hash.value === b.hash.value) {
          return 0;
        }
        return a.hash.value < b.hash.value ? -1 : 1;
      }
    },
    {
      title: "Modified",
      field: "lastModified",
      type: "string"
    },
    {
      title: "Size",
      field: "sizeBytes",
      render: (rowData) => formatByteSize(rowData.sizeBytes)
    }
  ];
  return /* @__PURE__ */ React.createElement(
    Table,
    {
      title: `Nexus Repository Manager: ${title}`,
      options: { paging: true, padding: "dense" },
      data: artifacts,
      columns,
      emptyContent: /* @__PURE__ */ React.createElement(
        "div",
        {
          className: classes.empty,
          "data-testid": "nexus-repository-manager-empty-table"
        },
        "No data was added yet,\xA0",
        /* @__PURE__ */ React.createElement(Link, { to: "https://github.com/janus-idp/backstage-plugins/blob/main/plugins/nexus-repository-manager/ANNOTATIONS.md" }, "learn how to add data"),
        "."
      )
    }
  );
};

function getAssetVariants(component) {
  var _a;
  return new Set(
    (_a = component.assets) == null ? void 0 : _a.flatMap((asset) => {
      if (!asset.maven2) {
        return [];
      }
      const { classifier, extension } = asset.maven2;
      if (extension === "jar" && classifier) {
        return `+${classifier}`;
      }
      if (isPrimaryAsset(asset) && extension) {
        return extension;
      }
      return [];
    })
  );
}
function NexusRepositoryManager() {
  const nexusClient = useApi(NexusRepositoryManagerApiRef);
  const { entity } = useEntity();
  const { ANNOTATIONS } = nexusClient.getAnnotations();
  const { title, query } = useNexusRepositoryManagerAppData({
    entity,
    ANNOTATIONS
  });
  const { value: components = [], loading } = useAsync(async () => {
    const res = await nexusClient.getComponents(query);
    return res.components;
  });
  if (loading) {
    return /* @__PURE__ */ React.createElement("div", { "data-testid": "nexus-repository-manager-loading" }, /* @__PURE__ */ React.createElement(Progress, null));
  }
  const artifacts = components == null ? void 0 : components.map((v) => {
    var _a;
    const { component } = v;
    const firstAsset = (_a = component.assets) == null ? void 0 : _a.find(isPrimaryAsset);
    return {
      id: component.id,
      version: component.version,
      artifact: (
        // Include groupID for maven components
        component.format === "maven2" && component.group ? `${component.group}:${component.name}` : component.name
      ),
      assetVariants: getAssetVariants(component),
      repositoryType: component.repository,
      hash: getHash(firstAsset),
      lastModified: formatDate(firstAsset == null ? void 0 : firstAsset.lastModified),
      // TODO for a maven component that uploads e.g. a protobuf, jar, and zip,
      // this will combine all of their sizes.
      sizeBytes: getFileSize(v)
    };
  });
  return /* @__PURE__ */ React.createElement(
    "div",
    {
      style: { border: "1px solid #ddd" },
      "data-testid": "nexus-repository-manager-table"
    },
    /* @__PURE__ */ React.createElement(ArtifactTable, { title, artifacts })
  );
}

export { NexusRepositoryManager };
//# sourceMappingURL=index-4216f1c9.esm.js.map

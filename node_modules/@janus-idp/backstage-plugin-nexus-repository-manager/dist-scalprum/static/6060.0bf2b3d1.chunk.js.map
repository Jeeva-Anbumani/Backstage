{"version":3,"file":"static/6060.0bf2b3d1.chunk.js","mappings":"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","sources":["webpack://janus-idp.backstage-plugin-nexus-repository-manager/../../node_modules/@remix-run/router/dist/router.js"],"sourcesContent":["/**\n * @remix-run/router v1.10.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future = _extends({\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized =\n  // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && (\n  // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, viewTransitionOpts) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state, {\n      unstable_viewTransitionOpts: viewTransitionOpts\n    }));\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), viewTransitionOpts);\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      // Create a GET request for the loaders\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    });\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    }\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }));\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error);\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = getSubmittingFetcher(submission, existingFetcher);\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our action started, so that\n        // should take precedence over this redirect navigation.  We already\n        // set isRevalidationRequired so all loaders for the new route should\n        // fire unless opted out via shouldRevalidate\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        let loadingFetcher = getLoadingFetcher(submission);\n        state.fetchers.set(key, loadingFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return startRedirectNavigation(state, actionResult, {\n          fetcherSubmission: submission\n        });\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    );\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher = getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined);\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename);\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    let doneFetcher = getDoneFetcher(result.data);\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(state, redirect, _temp) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp === void 0 ? {} : _temp;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true\n    });\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      });\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getPathContributingMatches(contextualMatches).map(m => m.pathnameBase), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let resultType;\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  if (isResponse(result)) {\n    let status = result.status;\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null\n      };\n    }\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse = {\n        type: resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result\n      };\n      throw queryRouteResponse;\n    }\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n"],"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","Action","PopStateEventType","createMemoryHistory","options","entries","initialEntries","initialIndex","v5Compat","map","entry","index","createMemoryLocation","state","undefined","clampIndex","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","getUrlBasedHistory","window","globalHistory","usr","createHashHistory","substr","startsWith","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","invariant","value","message","Error","cond","console","warn","e","getHistoryState","idx","current","random","toString","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","history","getIndex","handlePop","origin","replaceState","addEventListener","removeEventListener","historyState","pushState","error","DOMException","name","ResultType","immutableRouteKeys","Set","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","route","treePath","id","join","children","isIndexRoute","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","every","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","caseSensitive","joinPaths","concat","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","String","array","keyMatch","optional","param","pattern","matcher","paramNames","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","decodeURIComponent","safelyDecodeURIComponent","decodeURI","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","pop","resolvePathname","normalizeSearch","normalizeHash","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","json","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","reject","pendingKeysSet","subscribers","deferredKeys","Array","isArray","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","pendingKeys","_tracked","isTrackedPromise","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","inFlightDataRoutes","dataRoutes","future","v7_normalizeFormMethod","v7_prependBasename","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","router","pendingNavigationController","initialized","m","lazy","loader","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","errors","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","updateState","newState","viewTransitionOpts","unstable_viewTransitionOpts","completeNavigation","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","currentLocation","toPaths","getSavedScrollPosition","async","startNavigation","opts","startUninterruptedRevalidation","getScrollKey","saveScrollPosition","enableViewTransition","routesToUse","loadingNavigation","overrideNavigation","notFoundMatches","cancelActiveDeferreds","submission","pendingActionData","pendingError","request","createClientSideRequest","findNearestBoundary","actionOutput","interruptActiveLoads","getSubmittingNavigation","actionMatch","getTargetMatch","callLoaderOrAction","shortCircuited","type","method","routeId","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","pendingActionError","isDeferredResult","handleAction","getLoadingNavigation","Request","fetcherSubmission","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","rf","fetcher","revalidatingFetcher","getLoadingFetcher","abortFetcher","abortPendingFetchRevalidations","f","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","fetcherKey","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","handleLoaders","getFetcher","_temp","revalidate","redirectLocation","isDocumentReload","reloadDocument","redirectHistoryAction","currentMatches","fetchersToLoad","all","resolveDeferredResults","setFetcherError","deleteFetcher","markFetchersDone","doneFetcher","getDoneFetcher","doneKeys","landedId","yeetedKeys","deleteBlocker","updateBlocker","newBlocker","blocker","shouldBlockNavigation","blockerKey","blockerFunction","predicate","cancelledRouteIds","dfd","y","initialize","_window","transitions","sessionPositions","sessionStorage","getItem","parse","restoreAppliedTransitions","_saveAppliedTransitions","setItem","persistAppliedTransitions","enableScrollRestoration","positions","getPosition","getKey","navigate","normalizedPath","normalizeTo","fromRouteId","relative","normalizeNavigateOptions","userReplace","unstable_viewTransition","fetch","requestMatches","existingFetcher","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","handleFetcherAction","resolveDeferredData","handleFetcherLoader","dispose","clear","getBlocker","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","newRoutes","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","body","isSubmissionNavigation","searchParams","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","_ref3","convertFormDataToSearchParams","convertSearchParamsToFormData","append","values","currentUrl","nextUrl","boundaryId","navigationMatches","boundaryMatches","findIndex","getLoaderMatchesUntilBoundary","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","resultType","onReject","runHandler","handler","context","requestContext","handlerError","isStaticRequest","protocol","isSameBasename","isRouteRequest","contentType","statusCode","_result$init","_result$init2","deferred","isDeferredData","foundError","loaderHeaders","processRouteLoaderData","newLoaderData","mergedLoaderData","reverse","find","_temp4","errorMessage","signals","isRevalidatingLoader","unwrap","getAll","pathMatches","Symbol"],"sourceRoot":""}
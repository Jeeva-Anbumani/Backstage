{"version":3,"file":"static/6899.c37129de.chunk.js","mappings":"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","sources":["webpack://janus-idp.backstage-plugin-nexus-repository-manager/../shared-react/src/types/pipeline/computedStatus.ts","webpack://janus-idp.backstage-plugin-nexus-repository-manager/../shared-react/src/utils/date/format-date.ts","webpack://janus-idp.backstage-plugin-nexus-repository-manager/../shared-react/src/utils/unit-conversion/format-byte-size.ts","webpack://janus-idp.backstage-plugin-nexus-repository-manager/./src/hooks/useNexusRepositoryManagerAppData.ts","webpack://janus-idp.backstage-plugin-nexus-repository-manager/./src/components/ArtifactTable/ArtifactTable.tsx","webpack://janus-idp.backstage-plugin-nexus-repository-manager/./src/components/NexusRepositoryManager/NexusRepositoryManager.tsx"],"sourcesContent":["export enum TerminatedReasons {\n  Completed = 'Completed',\n}\n\nexport enum ComputedStatus {\n  All = 'All',\n  Cancelling = 'Cancelling',\n  Succeeded = 'Succeeded',\n  Failed = 'Failed',\n  Running = 'Running',\n  'In Progress' = 'In Progress',\n  FailedToStart = 'FailedToStart',\n  PipelineNotStarted = 'PipelineNotStarted',\n  Skipped = 'Skipped',\n  Cancelled = 'Cancelled',\n  Pending = 'Pending',\n  Idle = 'Idle',\n  Other = 'Other',\n}\n\nexport enum SucceedConditionReason {\n  PipelineRunCancelled = 'StoppedRunFinally',\n  PipelineRunStopped = 'CancelledRunFinally',\n  TaskRunCancelled = 'TaskRunCancelled',\n  Cancelled = 'Cancelled',\n  PipelineRunStopping = 'PipelineRunStopping',\n  PipelineRunPending = 'PipelineRunPending',\n  TaskRunStopping = 'TaskRunStopping',\n  CreateContainerConfigError = 'CreateContainerConfigError',\n  ExceededNodeResources = 'ExceededNodeResources',\n  ExceededResourceQuota = 'ExceededResourceQuota',\n  ConditionCheckFailed = 'ConditionCheckFailed',\n}\n\nexport type StatusMessage = {\n  message: string;\n  color: string;\n};\n\nexport type TaskStatusTypes = {\n  PipelineNotStarted: number;\n  Pending: number;\n  Running: number;\n  Succeeded: number;\n  Cancelled: number;\n  Failed: number;\n  Skipped: number;\n};\n","import { format } from 'date-fns';\n\n/**\n * Returns the given date as a formated Date.\n *\n * @param date - The given date in seconds\n * @return The date formatted to en-US locale, otherwise return 'N/A'\n */\nexport function formatDate(date: string | number | Date | undefined): string {\n  if (!date || date === -1) {\n    return 'N/A';\n  }\n\n  const adjustedDate = typeof date === 'number' ? date * 1000 : date;\n  return format(new Date(adjustedDate), 'LLL d, yyyy, h:mm a');\n}\n","import { create, createUnitDependencies, unitDependencies } from 'mathjs';\n\nconst math = create({ createUnitDependencies, unitDependencies });\n\n// https://mathjs.org/docs/datatypes/units.html#prefixes\nconst UNITS = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'] as const;\n\n/**\n * Returns a given size in bytes formated to the closest to power of 1024\n *\n * @param sizeInBytes - The given size in bytes\n * @return Formated bytes in powers of 1024\n */\nexport function formatByteSize(sizeInBytes: number | undefined): string {\n  if (!sizeInBytes) {\n    return 'N/A';\n  }\n\n  // Math.log10(1_000) === 3\n  const i = Math.floor(Math.log10(sizeInBytes) / 3);\n\n  // Base 10 prefixes are more common when purchasing storage.\n  // math.unit bytes default to base 2 prefixes (e.g. 1 KiB = 1024 B).\n  // Therefore we need to change to base 10 prefixes (e.g. 1 kB = 1000 B).\n  const fileSize = math\n    .unit(sizeInBytes, 'B')\n    .to(UNITS[i])\n    .format({ precision: 3, notation: 'auto' });\n\n  return fileSize;\n}\n","import { type Entity } from '@backstage/catalog-model';\n\nimport { NEXUS_REPOSITORY_MANAGER_CONFIG_ANNOTATIONS } from '../annotations';\nimport { Annotation, type SearchServiceQuery } from '../types';\n\ntype UseNexusRepositoryManagerAppDataArgs = {\n  entity: Entity;\n  ANNOTATIONS: Readonly<Annotation[]>;\n};\n\nexport const useNexusRepositoryManagerAppData = ({\n  entity,\n  ANNOTATIONS,\n}: UseNexusRepositoryManagerAppDataArgs): {\n  title: string;\n  query: SearchServiceQuery;\n} => {\n  const value = ANNOTATIONS.reduce(\n    (acc, v) => {\n      const repository = entity?.metadata.annotations?.[v.annotation];\n\n      if (!repository) {\n        return acc;\n      }\n\n      acc.repositories.push(repository);\n      const query = v.query\n        ? Object.assign(acc.query, v.query(repository), { sort: 'version' })\n        : acc.query;\n\n      return {\n        ...acc,\n        query,\n      };\n    },\n    { repositories: [], query: {} } as {\n      repositories: string[];\n      query: SearchServiceQuery;\n    },\n  );\n\n  if (value.repositories.length === 0) {\n    throw new Error(`A Nexus Repository Manager annotation could not be found`);\n  }\n\n  let title: string | undefined;\n  NEXUS_REPOSITORY_MANAGER_CONFIG_ANNOTATIONS.forEach(v => {\n    switch (v.annotation /* NOSONAR - use switch for exhaustive check */) {\n      case 'nexus-repository-manager/config.title':\n        title = entity?.metadata.annotations?.[v.annotation];\n        break;\n      default:\n        // We want to throw a TS error if we have an unhandled annotation\n        // eslint-disable-next-line no-case-declarations\n        const exhaustiveCheck: never = v.annotation;\n        throw new Error(`Unhandled annotation case: ${exhaustiveCheck}`);\n    }\n  });\n\n  return {\n    title: title ?? value.repositories.join(' | '),\n    query: value.query,\n  };\n};\n","import React from 'react';\n\nimport { Link, Table, type TableColumn } from '@backstage/core-components';\n\nimport { Box, Chip, makeStyles } from '@material-ui/core';\n\nimport { formatByteSize } from '@janus-idp/shared-react';\n\nimport type { AssetHash } from '../../types';\n\nexport type ArtifactRowData = {\n  id?: string;\n  version?: string;\n  artifact?: string;\n  assetVariants: Set<string>;\n  repositoryType?: string;\n  hash?: AssetHash;\n  lastModified?: string;\n  sizeBytes?: number;\n};\n\nconst useStyles = makeStyles(theme => ({\n  chip: {\n    margin: 0,\n    marginRight: '.2em',\n    height: '1.5em',\n    '& > span': {\n      padding: '.3em',\n    },\n  },\n  empty: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'center',\n  },\n}));\n\nexport const ArtifactTable = ({\n  artifacts,\n  title,\n}: {\n  artifacts: ArtifactRowData[];\n  title: string;\n}) => {\n  const classes = useStyles();\n\n  const columns: TableColumn<ArtifactRowData>[] = [\n    {\n      title: 'Version',\n      field: 'version',\n      type: 'string',\n      highlight: true,\n    },\n    {\n      title: 'Artifact',\n      field: 'artifact',\n      type: 'string',\n      render: rowData => (\n        <>\n          {rowData.artifact}\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              flexWrap: 'wrap',\n              marginTop: '0.2em',\n            }}\n          >\n            {/* sort/reverse for stable order, and so we get `jar +sources` */}\n            {[...rowData.assetVariants]\n              .sort((a, b) => a.localeCompare(b))\n              .reverse()\n              .map(variant => {\n                return (\n                  <Chip\n                    label={variant}\n                    key={variant}\n                    className={classes.chip}\n                  />\n                );\n              })}\n          </Box>\n        </>\n      ),\n    },\n    {\n      title: 'Repository Type',\n      field: 'repositoryType',\n      type: 'string',\n    },\n    {\n      title: 'Checksum',\n      field: 'hash',\n      emptyValue: 'N/A',\n      render: rowData => (\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n          <Chip label={rowData.hash?.algorithm} className={classes.chip} />\n          {rowData.hash?.value.slice(0, 12)}\n        </Box>\n      ),\n      customFilterAndSearch: (term, rowData) => {\n        if (!rowData.hash) {\n          return false;\n        }\n        return rowData.hash.value.includes(term);\n      },\n      customSort: (a, b) => {\n        if (!a.hash) {\n          return -1;\n        }\n        if (!b.hash) {\n          return 1;\n        }\n        if (a.hash.value === b.hash.value) {\n          return 0;\n        }\n        return a.hash.value < b.hash.value ? -1 : 1;\n      },\n    },\n    {\n      title: 'Modified',\n      field: 'lastModified',\n      type: 'string',\n    },\n    {\n      title: 'Size',\n      field: 'sizeBytes',\n      render: rowData => formatByteSize(rowData.sizeBytes),\n    },\n  ];\n\n  return (\n    <Table\n      title={`Nexus Repository Manager: ${title}`}\n      options={{ paging: true, padding: 'dense' }}\n      data={artifacts}\n      columns={columns}\n      emptyContent={\n        <div\n          className={classes.empty}\n          data-testid=\"nexus-repository-manager-empty-table\"\n        >\n          No data was added yet,&nbsp;\n          <Link to=\"https://github.com/janus-idp/backstage-plugins/blob/main/plugins/nexus-repository-manager/ANNOTATIONS.md\">\n            learn how to add data\n          </Link>\n          .\n        </div>\n      }\n    />\n  );\n};\n","import React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { Progress } from '@backstage/core-components';\nimport { useApi } from '@backstage/core-plugin-api';\nimport { useEntity } from '@backstage/plugin-catalog-react';\n\nimport { formatDate } from '@janus-idp/shared-react';\n\nimport { NexusRepositoryManagerApiRef } from '../../api';\nimport { useNexusRepositoryManagerAppData } from '../../hooks';\nimport { ComponentXO } from '../../types';\nimport { getFileSize, getHash, isPrimaryAsset } from '../../utils';\nimport { ArtifactTable } from '../ArtifactTable';\n\n// Artifact types that we want to display: either classifiers (e.g. javadoc) or extensions (e.g. zip)\nexport function getAssetVariants(component: ComponentXO) {\n  return new Set<string>(\n    component.assets?.flatMap(asset => {\n      if (!asset.maven2) {\n        return [];\n      }\n\n      const { classifier, extension } = asset.maven2;\n      if (extension === 'jar' && classifier) {\n        return `+${classifier}`;\n      }\n      if (isPrimaryAsset(asset) && extension) {\n        return extension;\n      }\n      return [];\n    }),\n  );\n}\n\nexport function NexusRepositoryManager() {\n  const nexusClient = useApi(NexusRepositoryManagerApiRef);\n  const { entity } = useEntity();\n  const { ANNOTATIONS } = nexusClient.getAnnotations();\n\n  const { title, query } = useNexusRepositoryManagerAppData({\n    entity,\n    ANNOTATIONS,\n  });\n\n  const { value: components = [], loading } = useAsync(async () => {\n    const res = await nexusClient.getComponents(query);\n\n    return res.components;\n  });\n\n  if (loading) {\n    return (\n      <div data-testid=\"nexus-repository-manager-loading\">\n        <Progress />\n      </div>\n    );\n  }\n\n  const artifacts = components?.map(v => {\n    const { component } = v;\n\n    // theres only one asset per docker.image-name component\n    // if we want to support multiple repository types\n    // this will probably need to change in the future,\n    const firstAsset = component.assets?.find(isPrimaryAsset);\n\n    return {\n      id: component.id,\n      version: component.version,\n      artifact:\n        // Include groupID for maven components\n        component.format === 'maven2' && component.group\n          ? `${component.group}:${component.name}`\n          : component.name,\n      assetVariants: getAssetVariants(component),\n      repositoryType: component.repository,\n      hash: getHash(firstAsset),\n      lastModified: formatDate(firstAsset?.lastModified),\n      // TODO for a maven component that uploads e.g. a protobuf, jar, and zip,\n      // this will combine all of their sizes.\n      sizeBytes: getFileSize(v),\n    };\n  });\n\n  return (\n    <div\n      style={{ border: '1px solid #ddd' }}\n      data-testid=\"nexus-repository-manager-table\"\n    >\n      <ArtifactTable title={title} artifacts={artifacts} />\n    </div>\n  );\n}\n"],"names":["SucceedConditionReason","ComputedStatus","TerminatedReasons","formatDate","date","adjustedDate","format","Date","math","create","createUnitDependencies","unitDependencies","UNITS","useNexusRepositoryManagerAppData","entity","ANNOTATIONS","value","reduce","acc","v","repository","metadata","annotations","annotation","repositories","push","query","Object","assign","sort","length","Error","title","NEXUS_REPOSITORY_MANAGER_CONFIG_ANNOTATIONS","forEach","exhaustiveCheck","join","useStyles","makeStyles","theme","chip","margin","marginRight","height","padding","empty","spacing","display","justifyContent","ArtifactTable","artifacts","classes","columns","field","type","highlight","render","rowData","artifact","Box","sx","alignItems","flexWrap","marginTop","assetVariants","a","b","localeCompare","reverse","map","variant","Chip","label","className","emptyValue","hash","algorithm","slice","customFilterAndSearch","term","includes","customSort","sizeInBytes","i","Math","floor","log10","unit","to","precision","notation","formatByteSize","sizeBytes","Table","options","paging","data","emptyContent","div","data-testid","Link","getAssetVariants","component","Set","assets","flatMap","asset","maven2","classifier","extension","isPrimaryAsset","NexusRepositoryManager","nexusClient","useApi","NexusRepositoryManagerApiRef","useEntity","getAnnotations","components","loading","useAsync","async","getComponents","Progress","firstAsset","find","id","version","group","name","repositoryType","getHash","lastModified","getFileSize","style","border"],"sourceRoot":""}
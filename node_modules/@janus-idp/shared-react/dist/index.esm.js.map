{"version":3,"file":"index.esm.js","sources":["../../../node_modules/style-inject/dist/style-inject.es.js","../src/components/pipeline/HorizontalStackedBars.tsx","../src/components/common/CamelCaseWrap.tsx","../src/types/pipeline/computedStatus.ts","../src/utils/date/format-date.ts","../src/consts/pipeline.ts","../src/consts/common.ts","../src/utils/pipeline/task-run.ts","../src/utils/pipeline/pipeline.ts","../src/utils/unit-conversion/format-byte-size.ts","../src/utils/downloader/logs-downloader.ts","../src/utils/string/title-case.ts","../src/components/pipeline/TaskStatusTooltip.tsx","../src/components/common/StatusIconAndText.tsx","../src/hooks/useDeepCompareMemoize.ts","../src/hooks/debounce.ts"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React from 'react';\n\nimport classNames from 'classnames';\n\nimport './HorizontalStackedBars.css';\n\ntype StackedValue = {\n  color: string;\n  name: string;\n  size: number;\n};\n\ntype HorizontalStackedBarsProps = {\n  id: string;\n  barGap?: number;\n  height?: number | string;\n  inline?: boolean;\n  values: StackedValue[];\n  width?: number | string;\n  onClick?: () => void;\n};\n\nexport const HorizontalStackedBars = ({\n  id,\n  barGap,\n  height,\n  inline,\n  values,\n  width,\n  onClick,\n}: HorizontalStackedBarsProps) => (\n  <div\n    id={`horizontal-stacked-bars-${id}`}\n    data-testid={`horizontal-stacked-bars-${id}`}\n    className={classNames('bs-shared-horizontal-stacked-bars', {\n      'is-inline': inline,\n    })}\n    style={{ height, width, ['--bar-gap' as any]: barGap && `${barGap}px` }}\n    onClick={onClick}\n  >\n    <div className=\"bs-shared-horizontal-stacked-bars__bars\">\n      {values.map(({ color, name, size }) => (\n        <div\n          key={name}\n          className=\"bs-shared-horizontal-stacked-bars__data-bar\"\n          style={{\n            background: color,\n            flexGrow: size,\n          }}\n        />\n      ))}\n    </div>\n  </div>\n);\n","import React from 'react';\n\nconst MEMO: { [key: string]: any } = {};\n\ntype CamelCaseWrapProps = {\n  value: string;\n  dataTest?: string;\n};\n\nexport const CamelCaseWrap = ({ value, dataTest }: CamelCaseWrapProps) => {\n  if (!value) {\n    return '-';\n  }\n\n  if (MEMO[value]) {\n    return MEMO[value];\n  }\n\n  // Add word break points before capital letters (but keep consecutive capital letters together).\n  const words = value.match(/[A-Z]+[^A-Z]*|[^A-Z]+/g);\n  const rendered = (\n    <span data-testid={dataTest}>\n      {words?.map((word, i) => (\n        <React.Fragment key={word}>\n          {word}\n          {i !== words.length - 1 && <wbr />}\n        </React.Fragment>\n      ))}\n    </span>\n  );\n  MEMO[value] = rendered;\n  return rendered;\n};\n\nexport default CamelCaseWrap;\n","export enum TerminatedReasons {\n  Completed = 'Completed',\n}\n\nexport enum ComputedStatus {\n  All = 'All',\n  Cancelling = 'Cancelling',\n  Succeeded = 'Succeeded',\n  Failed = 'Failed',\n  Running = 'Running',\n  'In Progress' = 'In Progress',\n  FailedToStart = 'FailedToStart',\n  PipelineNotStarted = 'PipelineNotStarted',\n  Skipped = 'Skipped',\n  Cancelled = 'Cancelled',\n  Pending = 'Pending',\n  Idle = 'Idle',\n  Other = 'Other',\n}\n\nexport enum SucceedConditionReason {\n  PipelineRunCancelled = 'StoppedRunFinally',\n  PipelineRunStopped = 'CancelledRunFinally',\n  TaskRunCancelled = 'TaskRunCancelled',\n  Cancelled = 'Cancelled',\n  PipelineRunStopping = 'PipelineRunStopping',\n  PipelineRunPending = 'PipelineRunPending',\n  TaskRunStopping = 'TaskRunStopping',\n  CreateContainerConfigError = 'CreateContainerConfigError',\n  ExceededNodeResources = 'ExceededNodeResources',\n  ExceededResourceQuota = 'ExceededResourceQuota',\n  ConditionCheckFailed = 'ConditionCheckFailed',\n}\n\nexport type StatusMessage = {\n  message: string;\n  color: string;\n};\n\nexport type TaskStatusTypes = {\n  PipelineNotStarted: number;\n  Pending: number;\n  Running: number;\n  Succeeded: number;\n  Cancelled: number;\n  Failed: number;\n  Skipped: number;\n};\n","import { format } from 'date-fns';\n\n/**\n * Returns the given date as a formated Date.\n *\n * @param date - The given date in seconds\n * @return The date formatted to en-US locale, otherwise return 'N/A'\n */\nexport function formatDate(date: string | number | Date | undefined): string {\n  if (!date || date === -1) {\n    return 'N/A';\n  }\n\n  const adjustedDate = typeof date === 'number' ? date * 1000 : date;\n  return format(new Date(adjustedDate), 'LLL d, yyyy, h:mm a');\n}\n","export const pipelineGroupColor = '#38812f';\n","export const skippedColor = '#8a8d90';\nexport const cancelledColor = '#6a6e73';\nexport const pendingColor = '#8bc1f7';\nexport const runningColor = '#06c';\nexport const successColor = '#38812f';\nexport const failureColor = '#c9190b';\n","import { PipelineRunKind, TaskRunKind } from '../../types';\n\nexport const getTaskRunsForPipelineRun = (\n  pipelinerun: PipelineRunKind | null,\n  taskRuns: TaskRunKind[],\n): TaskRunKind[] => {\n  if (!taskRuns || taskRuns.length === 0) {\n    return [];\n  }\n  const associatedTaskRuns = taskRuns.reduce(\n    (acc: TaskRunKind[], taskRun: TaskRunKind) => {\n      if (\n        taskRun?.metadata?.ownerReferences?.[0]?.name ===\n        pipelinerun?.metadata?.name\n      ) {\n        acc.push(taskRun);\n      }\n      return acc;\n    },\n    [],\n  );\n\n  return associatedTaskRuns;\n};\n","import {\n  cancelledColor,\n  failureColor,\n  pendingColor,\n  runningColor,\n  skippedColor,\n  successColor,\n} from '../../consts';\nimport {\n  ComputedStatus,\n  PipelineRunKind,\n  PipelineTaskWithStatus,\n  StatusMessage,\n  SucceedConditionReason,\n  TaskRunKind,\n  TaskStatusTypes,\n} from '../../types';\nimport { getTaskRunsForPipelineRun } from './task-run';\n\nexport const getRunStatusColor = (status: string): StatusMessage => {\n  switch (status) {\n    case ComputedStatus.Succeeded:\n      return { message: 'Succeeded', color: successColor };\n    case ComputedStatus.Failed:\n      return { message: 'Failed', color: failureColor };\n    case ComputedStatus.FailedToStart:\n      return {\n        message: 'PipelineRun failed to start',\n        color: failureColor,\n      };\n    case ComputedStatus.Running:\n    case ComputedStatus['In Progress']:\n      return { message: 'Running', color: runningColor };\n\n    case ComputedStatus.Skipped:\n      return { message: 'Skipped', color: skippedColor };\n    case ComputedStatus.Cancelled:\n      return { message: 'Cancelled', color: cancelledColor };\n    case ComputedStatus.Cancelling:\n      return { message: 'Cancelling', color: cancelledColor };\n    case ComputedStatus.Idle:\n    case ComputedStatus.Pending:\n      return { message: 'Pending', color: pendingColor };\n    default:\n      return {\n        message: 'PipelineRun not started yet',\n        color: pendingColor,\n      };\n  }\n};\n\nconst getDate = (\n  run: PipelineRunKind,\n  field: 'completionTime' | 'startTime' | 'creationTimestamp',\n) => {\n  if (field === 'creationTimestamp') {\n    return run?.metadata?.creationTimestamp ?? '';\n  }\n  if (field === 'startTime' || field === 'completionTime') {\n    return run?.status?.[field] ?? '';\n  }\n  return '';\n};\n\nconst getLatestRun = (\n  runs: PipelineRunKind[],\n  field: 'completionTime' | 'startTime' | 'creationTimestamp',\n) => {\n  let latestRun = runs[0];\n  for (let i = 1; i < runs.length; i++) {\n    latestRun =\n      new Date(getDate(runs?.[i], field)) > new Date(getDate(latestRun, field))\n        ? runs[i]\n        : latestRun;\n  }\n  return latestRun;\n};\n\nexport const getLatestPipelineRun = (\n  runs: PipelineRunKind[],\n  field: string,\n): PipelineRunKind | null => {\n  if (runs?.length > 0 && field) {\n    let latestRun;\n    if (\n      field === 'completionTime' ||\n      field === 'startTime' ||\n      field === 'creationTimestamp'\n    ) {\n      latestRun = getLatestRun(runs, field);\n    } else {\n      latestRun = runs[runs.length - 1];\n    }\n    return latestRun;\n  }\n  return null;\n};\n\nconst getSucceededStatus = (status: string): ComputedStatus => {\n  if (status === 'True') {\n    return ComputedStatus.Succeeded;\n  } else if (status === 'False') {\n    return ComputedStatus.Failed;\n  }\n  return ComputedStatus.Running;\n};\n\nexport const pipelineRunStatus = (\n  pipelineRun: PipelineRunKind | TaskRunKind | PipelineTaskWithStatus | null,\n) => {\n  const conditions = pipelineRun?.status?.conditions || [];\n  if (conditions.length === 0) return null;\n\n  const succeedCondition = conditions.find((c: any) => c.type === 'Succeeded');\n  const cancelledCondition = conditions.find(\n    (c: any) => c.reason === 'Cancelled',\n  );\n  const failedCondition = conditions.find((c: any) => c.reason === 'Failed');\n\n  if (\n    [\n      SucceedConditionReason.PipelineRunStopped,\n      SucceedConditionReason.PipelineRunCancelled,\n    ].includes(\n      (pipelineRun as PipelineRunKind)?.spec?.status as SucceedConditionReason,\n    ) &&\n    !cancelledCondition &&\n    !failedCondition\n  ) {\n    return ComputedStatus.Cancelling;\n  }\n\n  if (!succeedCondition?.status) {\n    return null;\n  }\n\n  const status = getSucceededStatus(succeedCondition.status);\n\n  if (succeedCondition.reason && succeedCondition.reason !== status) {\n    switch (succeedCondition.reason) {\n      case SucceedConditionReason.PipelineRunCancelled:\n      case SucceedConditionReason.TaskRunCancelled:\n      case SucceedConditionReason.Cancelled:\n      case SucceedConditionReason.PipelineRunStopped:\n        return ComputedStatus.Cancelled;\n      case SucceedConditionReason.PipelineRunStopping:\n      case SucceedConditionReason.TaskRunStopping:\n        return ComputedStatus.Failed;\n      case SucceedConditionReason.CreateContainerConfigError:\n      case SucceedConditionReason.ExceededNodeResources:\n      case SucceedConditionReason.ExceededResourceQuota:\n      case SucceedConditionReason.PipelineRunPending:\n        return ComputedStatus.Pending;\n      case SucceedConditionReason.ConditionCheckFailed:\n        return ComputedStatus.Skipped;\n      default:\n        return status;\n    }\n  }\n  return status;\n};\n\nexport const pipelineRunFilterReducer = (\n  pipelineRun: PipelineRunKind | TaskRunKind,\n): ComputedStatus => {\n  const status = pipelineRunStatus(pipelineRun);\n  return status || ComputedStatus.Other;\n};\n\nexport const updateTaskStatus = (\n  pipelinerun: PipelineRunKind | null,\n  taskRuns: TaskRunKind[],\n): TaskStatusTypes => {\n  const skippedTaskLength = pipelinerun?.status?.skippedTasks?.length || 0;\n  const PLRTaskRuns = getTaskRunsForPipelineRun(pipelinerun, taskRuns);\n  const taskStatus: TaskStatusTypes = {\n    PipelineNotStarted: 0,\n    Pending: 0,\n    Running: 0,\n    Succeeded: 0,\n    Failed: 0,\n    Cancelled: 0,\n    Skipped: skippedTaskLength,\n  };\n\n  if (!PLRTaskRuns || PLRTaskRuns.length === 0) {\n    return taskStatus;\n  }\n\n  PLRTaskRuns.forEach((taskRun: TaskRunKind) => {\n    const status = taskRun && pipelineRunFilterReducer(taskRun);\n    if (status === 'Succeeded') {\n      taskStatus[ComputedStatus.Succeeded]++;\n    } else if (status === 'Running') {\n      taskStatus[ComputedStatus.Running]++;\n    } else if (status === 'Failed') {\n      taskStatus[ComputedStatus.Failed]++;\n    } else if (status === 'Cancelled') {\n      taskStatus[ComputedStatus.Cancelled]++;\n    } else {\n      taskStatus[ComputedStatus.Pending]++;\n    }\n  });\n\n  return {\n    ...taskStatus,\n  };\n};\n\nexport const totalPipelineRunTasks = (\n  pipelinerun: PipelineRunKind | null,\n): number => {\n  if (!pipelinerun?.status?.pipelineSpec) {\n    return 0;\n  }\n  const totalTasks = (pipelinerun.status.pipelineSpec?.tasks || []).length;\n  const finallyTasks =\n    (pipelinerun.status.pipelineSpec?.finally || []).length ?? 0;\n  return totalTasks + finallyTasks;\n};\n\nexport const getTaskStatus = (\n  pipelinerun: PipelineRunKind,\n  taskRuns: TaskRunKind[],\n) => {\n  const totalTasks = totalPipelineRunTasks(pipelinerun);\n  const plrTaskLength = taskRuns.length;\n  const skippedTaskLength = pipelinerun?.status?.skippedTasks?.length || 0;\n\n  const taskStatus: TaskStatusTypes = updateTaskStatus(pipelinerun, taskRuns);\n\n  if (taskRuns?.length > 0) {\n    const pipelineRunHasFailure = taskStatus[ComputedStatus.Failed] > 0;\n    const pipelineRunIsCancelled =\n      pipelineRunFilterReducer(pipelinerun) === ComputedStatus.Cancelled;\n    const unhandledTasks =\n      totalTasks >= plrTaskLength\n        ? totalTasks - plrTaskLength - skippedTaskLength\n        : totalTasks;\n\n    if (pipelineRunHasFailure || pipelineRunIsCancelled) {\n      taskStatus[ComputedStatus.Cancelled] += unhandledTasks;\n    } else {\n      taskStatus[ComputedStatus.Pending] += unhandledTasks;\n    }\n  } else if (\n    pipelinerun?.status?.conditions?.[0]?.status === 'False' ||\n    pipelinerun?.spec.status === SucceedConditionReason.PipelineRunCancelled\n  ) {\n    taskStatus[ComputedStatus.Cancelled] = totalTasks;\n  } else if (\n    pipelinerun?.spec.status === SucceedConditionReason.PipelineRunPending\n  ) {\n    taskStatus[ComputedStatus.Pending] += totalTasks;\n  } else {\n    taskStatus[ComputedStatus.PipelineNotStarted]++;\n  }\n  return taskStatus;\n};\n","import { create, createUnitDependencies, unitDependencies } from 'mathjs';\n\nconst math = create({ createUnitDependencies, unitDependencies });\n\n// https://mathjs.org/docs/datatypes/units.html#prefixes\nconst UNITS = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'] as const;\n\n/**\n * Returns a given size in bytes formated to the closest to power of 1024\n *\n * @param sizeInBytes - The given size in bytes\n * @return Formated bytes in powers of 1024\n */\nexport function formatByteSize(sizeInBytes: number | undefined): string {\n  if (!sizeInBytes) {\n    return 'N/A';\n  }\n\n  // Math.log10(1_000) === 3\n  const i = Math.floor(Math.log10(sizeInBytes) / 3);\n\n  // Base 10 prefixes are more common when purchasing storage.\n  // math.unit bytes default to base 2 prefixes (e.g. 1 KiB = 1024 B).\n  // Therefore we need to change to base 10 prefixes (e.g. 1 kB = 1000 B).\n  const fileSize = math\n    .unit(sizeInBytes, 'B')\n    .to(UNITS[i])\n    .format({ precision: 3, notation: 'auto' });\n\n  return fileSize;\n}\n","import { saveAs } from 'file-saver';\n\nexport const downloadLogFile = (data: string, filename: string) => {\n  const blob = new Blob([data], { type: 'text/log;charset=utf-8' });\n  saveAs(blob, filename);\n};\n","export const getTitleCase = (str: string) =>\n  str.charAt(0).toUpperCase() + str.substring(1);\n","import React from 'react';\n\nimport { ComputedStatus, TaskStatusTypes } from '../../types';\nimport { getRunStatusColor } from '../../utils';\n\nimport './TaskStatusTooltip.css';\n\ninterface TaskStatusToolTipProps {\n  taskStatus: TaskStatusTypes;\n}\n\nexport const TaskStatusTooltip = ({ taskStatus }: TaskStatusToolTipProps) => {\n  return (\n    <div className=\"bs-shared-task-status-tooltip\">\n      {Object.keys(ComputedStatus).map(status => {\n        const { message, color } = getRunStatusColor(status);\n        return taskStatus[status as keyof TaskStatusTypes] ? (\n          <React.Fragment key={status}>\n            <div\n              className=\"bs-shared-task-status-tooltip__legend\"\n              style={{ background: color }}\n            />\n            <div>\n              {status === ComputedStatus.PipelineNotStarted ||\n              status === ComputedStatus.FailedToStart\n                ? message\n                : `${taskStatus[status as keyof TaskStatusTypes]} ${message}`}\n            </div>\n          </React.Fragment>\n        ) : null;\n      })}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport classNames from 'classnames';\n\nimport CamelCaseWrap from './CamelCaseWrap';\n\nimport './StatusIconAndText.css';\n\ntype StatusIconAndTextProps = {\n  title: string;\n  iconOnly?: boolean;\n  className?: string;\n  icon: React.ReactElement;\n  spin?: boolean;\n};\n\nconst DASH = '-';\n\nexport const StatusIconAndText = ({\n  icon,\n  title,\n  spin,\n  iconOnly,\n  className,\n}: StatusIconAndTextProps): React.ReactElement => {\n  if (!title) {\n    return <>{DASH}</>;\n  }\n\n  if (iconOnly) {\n    return (\n      <>\n        {React.cloneElement(icon, {\n          'data-testid': `icon-only-${title}`,\n          className: icon.props.className,\n        })}\n      </>\n    );\n  }\n\n  return (\n    <span\n      className={classNames('bs-shared-icon-and-text', className)}\n      data-testid={`icon-with-title-${title}`}\n      title={title}\n    >\n      {React.cloneElement(icon, {\n        className: classNames(\n          spin && 'fa-spin',\n          icon.props.className,\n          'bs-shared-icon-and-text__icon bs-shared-icon-flex-child',\n        ),\n      })}\n      <CamelCaseWrap value={title} dataTest=\"status-text\" />\n    </span>\n  );\n};\n\nexport default StatusIconAndText;\n","import React from 'react';\n\nimport { isEqual } from 'lodash';\n\nexport const useDeepCompareMemoize = <T = any>(\n  value: T,\n  stringify?: boolean,\n): T => {\n  const ref = React.useRef<T>();\n\n  if (\n    stringify\n      ? JSON.stringify(value) !== JSON.stringify(ref.current)\n      : !isEqual(value, ref.current)\n  ) {\n    ref.current = value;\n  }\n\n  return ref.current as T;\n};\n","import React from 'react';\n\nimport { debounce } from 'lodash';\n\nimport { useDeepCompareMemoize } from './useDeepCompareMemoize';\n\ninterface Cancelable {\n  cancel(): void;\n  flush(): void;\n}\n\nexport const useDebounceCallback = <T extends (...args: any[]) => any>(\n  callback: T,\n  timeout: number = 500,\n  debounceParams: {\n    leading?: boolean;\n    trailing?: boolean;\n    maxWait?: number;\n  } = {\n    leading: false,\n    trailing: true,\n  },\n): ((...args: any) => any) & Cancelable => {\n  const memDebounceParams = useDeepCompareMemoize(debounceParams);\n  const callbackRef = React.useRef<T>();\n  callbackRef.current = callback;\n\n  return React.useMemo(() => {\n    return debounce(\n      (...args) => callbackRef.current?.(...args),\n      timeout,\n      memDebounceParams,\n    );\n  }, [memDebounceParams, timeout]);\n};\n"],"names":["TerminatedReasons","ComputedStatus","SucceedConditionReason"],"mappings":"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"}